===========================================================================================================================
## Primeira parte do curso de JPA
===========================================================================================================================
Curso de Persistência com JPA: Introdução ao Hibernate

05/07/2021 - Segunda feira.


01 - Criar projeto, adicionar pom.xml

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>br.com.alura</groupId>
    <artifactId>lojajpa</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-entitymanager</artifactId>
            <version>5.4.27.Final</version>
        </dependency>
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <version>1.4.200</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.0</version>
                <configuration>
                    <release>11</release>
                </configuration>
            </plugin>
        </plugins>
    </build>
    
</project>

02 - Perstencia XML onde fica as congurações do banco de dados.
<?xml version="1.0" encoding="utf-8" ?>
<persistence version="2.2"
             xmlns="http://xmlns.jcp.org/xml/ns/persistence"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_2.xsd">
    
    <persistence-unit name="loja" transaction-type="RESOURCE_LOCAL">
        <properties>
            <property name="javax.persistence.jdbc.driver" value="org.h2.Driver"/>
            <property name="javax.persistence.jdbc.url" value="jdbc:h2:mem:loja"/>
            <property name="javax.persistence.jdbc.user" value="sa"/>
            <property name="javax.persistence.jdbc.password" value=""/>
            
            <property name="hibernate.dialect" value="org.hibernate.dialect.H2Dialect"/>
        </properties>
    </persistence-unit>

</persistence>


03 - Criado mapemento da tabela produtos.

----------------------
     produtos
----------------------
id_produto bigint(PK)
----------------------
nome varchar(30)
descricao varchar(60)
preco decimal
----------------------

@Entity
@Table(name = "produtos")
public class Produto{

    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String nome;
    private String descricao;
    private BigDecimal preco
...
}

04 - Percistencia no banco de dados, CRUD.

- Adicionado configurações no Percistense.xml para criar e mostrar sql do banco de dados já formtados.
<property name="hibernate.show_sql" value="true"/>
<property name="hibernate.format_sql" value="true"/>
<property name="hibernate.hbm2ddl.auto" value="update"/>

- Criado classe de teste para persistir (gravar) produtos no banco de dados.
public class CadastroDeProduto {

    public static void main(String[] args) {
	
	    //cria objeto produto
        Produto celular = new Produto();
        celular.setNome("Xiomi Redmi");
        celular.setDescricao("Muto legal");
        celular.setPreco(new BigDecimal("800"));

        //cria persistencia 
        EntityManagerFactory factory = Persistence.createEntityManagerFactory("loja");        
		//cia conexão com o banco de dados.
        EntityManager em = factory.createEntityManager();

        //abre transação com o banco de dados. 
        em.getTransaction().begin();
		//insere na tabela produtos o celular.
        em.persist(celular);		
        em.getTransaction().commit();
        //fecha transação
        em.close();
    }
	
05 - Organizando o Código

- Criado classe que retorna um EntityManager
public class JPAUtil {

    private static final EntityManagerFactory FACTORY = Persistence.createEntityManagerFactory("loja");

    public static EntityManager getFactory(){
        return FACTORY.createEntityManager();
    }
}
- Criado DAO onde vai ficar o métodos de acesso a banco de dados.
    private EntityManager em;

    public ProdutoDao(EntityManager em) {
        this.em = em;
    }

    public void cadastrar(Produto produto){
        em.persist(produto);
    }
	
06 - Adicionando data de cadastro do produto e categoria

- Mapeia o Enum como string para o banco de dados.
@Enumerated(EnumType.STRING)
private Categoria categoria;

- Data LocalDateTime();

07 - Relacionamento das tabelas Categorias e Produtos

----------------------
     produtos
----------------------
id bigint(PK)
----------------------
nome varchar(30)
descricao varchar(60)
preco decimal
----------------------
        (*)		
		 |
		 |
		 |
		 |		 
		(1)
----------------------
     categorias
----------------------
id bigint(PK)
----------------------
nome varchar(30)
----------------------

- Classes
# Produto
@ManyToOne
private Categoria categoria;

# Categoria
public class Categoria {

    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String nome;
	
# Saida no console	
	
Hibernate: 
    
    create table categorias (
       id bigint generated by default as identity,
        nome varchar(255),
        primary key (id)
    )
Hibernate: 
    
    create table produtos (
       id bigint generated by default as identity,
        dataCadastro timestamp,
        descricao varchar(255),
        nome varchar(255),
        preco decimal(19,2),
        categoria_id bigint,
        primary key (id)
    )
Hibernate:     
    alter table produtos 
       add constraint FK8rqw0ljwdaom34jr2t46bjtrn 
       foreign key (categoria_id) 
       references categorias


08 - Ciclos de vida das entidades.

# Transient: new Entidade(), não estáo na JPA.
# Managed: persist(entidade)[transient para Managed], merge(entidade)[Detached para Managed], find()[Banco de Dados para Managed], createQuery()[Banco de Dados para Managed].
# Detached: close() [Altera todas as entidades para Detached e fecha o EntityManager], clear()[Altera todas as entidades para Detached].
# Banco de dados: commit()[Detached para Banco de Dados fecha a transação], flush()[Detached para Banco de Dados não fecha a transação].
# Removed: remove() [Altera de Managed para Removed].

09 - Método alterar com merge();

public void alterar(Categoria categoria){
        em.merge(categoria);
}

10 - Consulta do JPA

Utilizando JPQL para fazer a consulta de lista
public List<Produto> todos() {
	String jpql = "SELECT p FROM Produto p";
	return em.createQuery(jpql, Produto.class).getResultList();
}

Utilizando find() para buscar por ID
public Produto buscar(long id) {
	return em.find(Produto.class, id);
}

11 - Consultas com filtros utilizando parämetros.

public List<Produto> buscarNomeCategoria(String nome){
	String jpql = "SELECT p FROM Produto p WHERE p.categoria.nome  = :nome";
	return em.createQuery(jpql, Produto.class).setParameter("nome", nome).getResultList();
}

public BigDecimal buscarPrecoPorProduto(String nome){
	String jpql = "SELECT p.preco FROM Produto p WHERE p.nome = :nome";
	return em.createQuery(jpql, BigDecimal.class)
			.setParameter("nome", nome)
			.getSingleResult();
}

===========================================================================================================================
## Segunda parte do curso de JPA
Curso de Java e JPA: Consultas avançadas, performance e modelos complexos
===========================================================================================================================

1 - Mapeando novas tabelas

----------------------
     clientes
----------------------
id bigint(PK)
----------------------
nome varchar(30)
cpf varchar(11)
----------------------
        (1)		
		 |
		 |
		 |
		 |		 
		(*)
----------------------
     pedidos
----------------------
id bigint(PK)
----------------------
data date   date
cliente_id  biint
valor_total decimal
----------------------

2 - Mapeando tabela item_pedido

----------------------
     pedidos
----------------------
id bigint(PK)
----------------------
data date   date
cliente_id  biint
valor_total decimal
----------------------
        (1)		
		 |
		 |
		 |
		 |		 
		(*)
----------------------
     itens_pedido
----------------------
id bigint(PK)
----------------------
preco_unitario decimal
quantidade     int 
produto_id     bigint
pedido_id     bigint
----------------------
        (*)		
		 |
		 |
		 |
		 |		 
		(1)
----------------------
     produtos
----------------------
id bigint(PK)
----------------------
nome varchar(30)
descricao varchar(60)
preco decimal
----------------------
	

2 - Relacionamento bidirecional boas praticas

mappedBy: indica que o relacionamento já está mapeado na tabela pedido
@OneToMany(mappedBy = "pedido")
private List<ItemPedido> itens;

- Inicializar a lista.
private List<ItemPedido> itens = new ArrayList<>();

- Método para setar os dois lados do relacionamento
public class Pedido {

   ...
   
   @OneToMany(mappedBy = "pedido")
   private List<ItemPedido> itens = new ArrayList<>();
	
	...
	
   public void adiciona(ItemPedido item){
        item.setPedido(this);
        itens.add(item);
    }
}


3 - Cadastrando pedido 

Tudo que acontece com o pedido deve refletir na itens_pedido, adicionado o cascade = CascadeType.ALL para isso.
@OneToMany(mappedBy = "pedido", cascade = CascadeType.ALL)
private List<ItemPedido> itens = new ArrayList<>();
	
	
4 - Consultas de agregação(MAX, AVG, SUM,...) e ajustado classes Pedido e ItensPedido para ajustar o preço.
   public BigDecimal valorTotalVendido(){
        String jpql = "SELECT SUM(p.valorTotal) FROM Pedido p";
        return em.createQuery(jpql, BigDecimal.class).getSingleResult();
    }

5 - Consultas com select new da JPQL
public List<RelatorioVendasVo> relatorioVendas(){
	String jpql = "SELECT new br.com.alura.loja.vo.RelatorioVendasVo(" +
				  "produto.nome, " +
				  "       SUM(item.quantidade), " +
				  "       MAX(pedido.data)) " +
				  "FROM Pedido pedido " +
				  "JOIN pedido.itens item " +
				  "JOIN item.produto produto " +
				  "GROUP BY produto.nome " +
				  "ORDER BY SUM(item.quantidade) DESC";
	return em.createQuery(jpql, RelatorioVendasVo.class).getResultList();
}


6 - Utilizando Named Queries

- Definir Consultas na Entidade
@Entity
@Table(name = "produtos")
@NamedQuery(name = "Produto.buscarNomeCategoria",
            query = "SELECT p FROM Produto p WHERE p.categoria.nome  = :nome")
public class Produto{
...
}

- Chamar na classe DAO
 public List<Produto> buscarNomeCategoria(String nome){
        return em.createNamedQuery("Produto.buscarNomeCategoria", Produto.class)
                .setParameter("nome", nome)
                .getResultList();
    }
----------------------------------------------------------------------------------------
7 - Performace
----------------------------------------------------------------------------------------

Todo o relacionamento ToOne(ManyToOne ou OneToOne) por padrão é carregado junto com a entidade que está declado, Eager.
Exemplo:

# Pedido possui um relacionamento com cliente.

@Entity
public class Pedido {
     ....
    @ManyToOne
    private Cliente cliente;
	..
}	

# Carrega pedido

Pedido pedido = em.find(Pedido.class, 1l);

# Carregado o cliente.
 select
        pedido0_.id as id1_3_0_,
        pedido0_.cliente_id as cliente_4_3_0_,
        pedido0_.data as data2_3_0_,
        pedido0_.valor_total as valor_to3_3_0_,
        cliente1_.id as id1_1_1_,
        cliente1_.cpf as cpf2_1_1_,
        cliente1_.nome as nome3_1_1_ 
    from
        pedidos pedido0_ 
    left outer join
        clientes cliente1_ 
            on pedido0_.cliente_id=cliente1_.id 
    where
        pedido0_.id=?

Todo o relacionamento ToMany(OneToMany ou ManyToMany) por padrão precisa ser invocado para carregar, Lazy.
Exemplo:

# Pedido tem muitos itens relacionados.

@Entity
public class Pedido {
     ....
   @OneToMany(mappedBy = "pedido", cascade = CascadeType.ALL)
    private List<ItemPedido> itens = new ArrayList<>();
	..
}	

# Teste para saber a quantidade de itens no pedido 1 ai carrega os intens
Pedido pedido = em.find(Pedido.class, 1l);
System.out.println("Quantidade de itens no pedidos: " + pedido.getItens().size());

# Saida
    select
        itens0_.pedido_id as pedido_i4_2_0_,
        itens0_.id as id1_2_0_,
        itens0_.id as id1_2_1_,
        itens0_.pedido_id as pedido_i4_2_1_,
        itens0_.precoUnitario as precouni2_2_1_,
        itens0_.produto_id as produto_5_2_1_,
        itens0_.quantidade as quantida3_2_1_,
        produto1_.id as id1_4_2_,
        produto1_.categoria_id as categori6_4_2_,
        produto1_.dataCadastro as datacada2_4_2_,
        produto1_.descricao as descrica3_4_2_,
        produto1_.nome as nome4_4_2_,
        produto1_.preco as preco5_4_2_,
        categoria2_.id as id1_0_3_,
        categoria2_.nome as nome2_0_3_ 
    from
        itens_pedido itens0_ 
    left outer join
        produtos produto1_ 
            on itens0_.produto_id=produto1_.id 
    left outer join
        categorias categoria2_ 
            on produto1_.categoria_id=categoria2_.id 
    where
        itens0_.pedido_id=?
Quantidade de pedidos: 2

Boa prática

# Alterar relacionamentos @ToOne para Lazy

----------------------------------------------------------------------------------------
08 - Consultas com Join Fetch
----------------------------------------------------------------------------------------

Queries planejadas em algumas queries eu quero trazer a classe relacionada.

Exemplo, carregar cliente do pedidido mesmo cliente sendo Lazy.
@Entity
public class Pedido {
...
    @ManyToOne(fetch = FetchType.LAZY)
    private Cliente cliente;
...
}	

public class PedidoDao{

    ....
    public Pedido buscarCliente(Long idPedido){
        String jpql = "SELECT p FROM Pedido p JOIN FETCH p.cliente WHERE p.id = :idPedido";
        return em.createQuery(jpql, Pedido.class).setParameter("idPedido", idPedido).getSingleResult();
     }
}


----------------------------------------------------------------------------------------
09 - Consultas com parâmetros dinâmicos
----------------------------------------------------------------------------------------

public List<Cliente> buscarClientes(String nome, LocalDate dataNascimento) {
    String jpql = "SELECT c FROM Cliente c WHERE ";
    if (nome != null && !nome.trim().isEmpty()) {
        jpql += "AND c.nome = :nome ";
    }
    if (dataNascimento != null) {
        jpql += " AND c.dataNascimento = :dataNascimento ";
    }
    TypedQuery<Cliente> query = em.createQuery(jpql, Cliente.class);
    if (nome != null && !nome.trim().isEmpty()) {
        query.setParameter("nome", nome);
    }
    if (dataNascimento != null) {
        query.setParameter("dataNascimento", dataNascimento);
    }
    return query.getResultList();
}

----------------------------------------------------------------------------------------
10 - Imbutindo campos na classe @Embedded(atributo da Entity) @Embeddable(classe)
----------------------------------------------------------------------------------------

@Entity
@Table(name = "clientes")
public class Cliente {

.....
  @Embedded
    private DadosPessoais dadosPessoais;

    public DadosPessoais getDadosPessoais() {
        return dadosPessoais;
    }

    public String getNome(){
        return this.dadosPessoais.getNome();
    }
}

@Embeddable
public class DadosPessoais {

    private String nome;
    private String cpf;
 ...
}

----------------------------------------------------------------------------------------
11 - Herança @Inheritance
----------------------------------------------------------------------------------------

Fazer herança do mdelo abaixo:

----------------------
     informatica
----------------------
id bigint(PK)
----------------------
marca varchar(60)
modelo varchar(60)
----------------------
        (*)
		 |
		 |
		 |
		 |
		(1)
----------------------
     produtos
----------------------
id bigint(PK)
----------------------
nome varchar(60)
descricao varchar(60)
preco decimal
data_cadastro date
----------------------
        (1)
		 |
		 |
		 |
		 |
		(*)
----------------------
     livros
----------------------
id bigint(PK)
----------------------
autor varchar(60)
numero_paginas int
----------------------

# Criar Entidades Livro e Informatica herdando de Produto
@Entity
@Table(name = "informatica")
public class Informatica extends Produto{

    private String marca;
    private String modelo;
...
}

@Entity
@Table(name = "livros")
public class Livro extends Produto{

    private String autor;
    @Column(name = "numero_paginas")
    private Integer numeroPaginas;
...

}

# Setar classe produto com @Inheritance()

@Entity
@Table(name = "produtos")
@Inheritance(strategy = InheritanceType.SINGLE_TABLE)
public class Produto{
....
}

# Estratégia uma única classe no banco de dados

@Inheritance(strategy = InheritanceType.SINGLE_TABLE)

Mapeamento
 create table produtos (
       DTYPE varchar(31) not null,
        id bigint generated by default as identity,
        dataCadastro timestamp,
        descricao varchar(255),
        nome varchar(255),
        preco decimal(19,2),
        marca varchar(255),
        modelo varchar(255),
        autor varchar(255),
        numero_paginas integer,
        categoria_id bigint,
        primary key (id)
    )

OBS coluna DTYPE varchar(31) not null, está mapeado o nome da entidade filha.

# Estratégia separar em tabelas no banco de dados

@Inheritance(strategy = InheritanceType.JOINED)

@Entity
@Table(name = "produtos")
@Inheritance(strategy = InheritanceType.JOINED)
public class Produto{
....
}

- As Classes Informatica e Livro não altera.

- Mapeamento
    create table informatica (
       marca varchar(255),
        modelo varchar(255),
        id bigint not null,
        primary key (id)
    )
    create table livros (
       autor varchar(255),
        numero_paginas integer,
        id bigint not null,
        primary key (id)
    )
       create table produtos (
          id bigint generated by default as identity,
           dataCadastro timestamp,
           descricao varchar(255),
           nome varchar(255),
           preco decimal(19,2),
           categoria_id bigint,
           primary key (id)
       )
    alter table informatica
       add constraint FKmhtjk4sjdh41u9qkvrjlyjim9
       foreign key (id)
       references produtos

   alter table livros
       add constraint FK9com4al5c4c8ufig5p108elae
       foreign key (id)
       references produtos

proximo video 05 - Mapeamento de chaves compostas
