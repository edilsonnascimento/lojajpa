===========================================================================================================================
## Primeira parte do curso de JPA
===========================================================================================================================
Curso de Persistência com JPA: Introdução ao Hibernate

05/07/2021 - Segunda feira.


01 - Criar projeto, adicionar pom.xml

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>br.com.alura</groupId>
    <artifactId>lojajpa</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-entitymanager</artifactId>
            <version>5.4.27.Final</version>
        </dependency>
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <version>1.4.200</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.0</version>
                <configuration>
                    <release>11</release>
                </configuration>
            </plugin>
        </plugins>
    </build>
    
</project>

02 - Perstencia XML onde fica as congurações do banco de dados.
<?xml version="1.0" encoding="utf-8" ?>
<persistence version="2.2"
             xmlns="http://xmlns.jcp.org/xml/ns/persistence"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_2.xsd">
    
    <persistence-unit name="loja" transaction-type="RESOURCE_LOCAL">
        <properties>
            <property name="javax.persistence.jdbc.driver" value="org.h2.Driver"/>
            <property name="javax.persistence.jdbc.url" value="jdbc:h2:mem:loja"/>
            <property name="javax.persistence.jdbc.user" value="sa"/>
            <property name="javax.persistence.jdbc.password" value=""/>
            
            <property name="hibernate.dialect" value="org.hibernate.dialect.H2Dialect"/>
        </properties>
    </persistence-unit>

</persistence>


03 - Criado mapemento da tabela produtos.

----------------------
     produtos
----------------------
id_produto bigint(PK)
----------------------
nome varchar(30)
descricao varchar(60)
preco decimal
----------------------

@Entity
@Table(name = "produtos")
public class Produto{

    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String nome;
    private String descricao;
    private BigDecimal preco
...
}

04 - Percistencia no banco de dados, CRUD.

- Adicionado configurações no Percistense.xml para criar e mostrar sql do banco de dados já formtados.
<property name="hibernate.show_sql" value="true"/>
<property name="hibernate.format_sql" value="true"/>
<property name="hibernate.hbm2ddl.auto" value="update"/>

- Criado classe de teste para persistir (gravar) produtos no banco de dados.
public class CadastroDeProduto {

    public static void main(String[] args) {
	
	    //cria objeto produto
        Produto celular = new Produto();
        celular.setNome("Xiomi Redmi");
        celular.setDescricao("Muto legal");
        celular.setPreco(new BigDecimal("800"));

        //cria persistencia 
        EntityManagerFactory factory = Persistence.createEntityManagerFactory("loja");        
		//cia conexão com o banco de dados.
        EntityManager em = factory.createEntityManager();

        //abre transação com o banco de dados. 
        em.getTransaction().begin();
		//insere na tabela produtos o celular.
        em.persist(celular);		
        em.getTransaction().commit();
        //fecha transação
        em.close();
    }
	
05 - Organizando o Código

- Criado classe que retorna um EntityManager
public class JPAUtil {

    private static final EntityManagerFactory FACTORY = Persistence.createEntityManagerFactory("loja");

    public static EntityManager getFactory(){
        return FACTORY.createEntityManager();
    }
}
- Criado DAO onde vai ficar o métodos de acesso a banco de dados.
    private EntityManager em;

    public ProdutoDao(EntityManager em) {
        this.em = em;
    }

    public void cadastrar(Produto produto){
        em.persist(produto);
    }
	
06 - Adicionando data de cadastro do produto e categoria

- Mapeia o Enum como string para o banco de dados.
@Enumerated(EnumType.STRING)
private Categoria categoria;

- Data LocalDateTime();

07 - Relacionamento das tabelas Categorias e Produtos

----------------------
     produtos
----------------------
id bigint(PK)
----------------------
nome varchar(30)
descricao varchar(60)
preco decimal
----------------------
        (*)		
		 |
		 |
		 |
		 |		 
		(1)
----------------------
     categorias
----------------------
id bigint(PK)
----------------------
nome varchar(30)
----------------------

- Classes
# Produto
@ManyToOne
private Categoria categoria;

# Categoria
public class Categoria {

    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String nome;
	
# Saida no console	
	
Hibernate: 
    
    create table categorias (
       id bigint generated by default as identity,
        nome varchar(255),
        primary key (id)
    )
Hibernate: 
    
    create table produtos (
       id bigint generated by default as identity,
        dataCadastro timestamp,
        descricao varchar(255),
        nome varchar(255),
        preco decimal(19,2),
        categoria_id bigint,
        primary key (id)
    )
Hibernate:     
    alter table produtos 
       add constraint FK8rqw0ljwdaom34jr2t46bjtrn 
       foreign key (categoria_id) 
       references categorias


08 - Ciclos de vida das entidades.

# Transient: new Entidade(), não estáo na JPA.
# Managed: persist(entidade)[transient para Managed], merge(entidade)[Detached para Managed], find()[Banco de Dados para Managed], createQuery()[Banco de Dados para Managed].
# Detached: close() [Altera todas as entidades para Detached e fecha o EntityManager], clear()[Altera todas as entidades para Detached].
# Banco de dados: commit()[Detached para Banco de Dados fecha a transação], flush()[Detached para Banco de Dados não fecha a transação].
# Removed: remove() [Altera de Managed para Removed].

09 - Método alterar com merge();

public void alterar(Categoria categoria){
        em.merge(categoria);
}

10 - Consulta do JPA

Utilizando JPQL para fazer a consulta de lista
public List<Produto> todos() {
	String jpql = "SELECT p FROM Produto p";
	return em.createQuery(jpql, Produto.class).getResultList();
}

Utilizando find() para buscar por ID
public Produto buscar(long id) {
	return em.find(Produto.class, id);
}

11 - Consultas com filtros utilizando parämetros.

public List<Produto> buscarNomeCategoria(String nome){
	String jpql = "SELECT p FROM Produto p WHERE p.categoria.nome  = :nome";
	return em.createQuery(jpql, Produto.class).setParameter("nome", nome).getResultList();
}

public BigDecimal buscarPrecoPorProduto(String nome){
	String jpql = "SELECT p.preco FROM Produto p WHERE p.nome = :nome";
	return em.createQuery(jpql, BigDecimal.class)
			.setParameter("nome", nome)
			.getSingleResult();
}

===========================================================================================================================
## Segunda parte do curso de JPA
Curso de Java e JPA: Consultas avançadas, performance e modelos complexos
===========================================================================================================================

1 - Mapeando novas tabelas

----------------------
     clientes
----------------------
id bigint(PK)
----------------------
nome varchar(30)
cpf varchar(11)
----------------------
        (1)		
		 |
		 |
		 |
		 |		 
		(*)
----------------------
     pedidos
----------------------
id bigint(PK)
----------------------
data date   date
cliente_id  biint
valor_total decimal
----------------------

2 - Mapeando tabela item_pedido

----------------------
     pedidos
----------------------
id bigint(PK)
----------------------
data date   date
cliente_id  biint
valor_total decimal
----------------------
        (1)		
		 |
		 |
		 |
		 |		 
		(*)
----------------------
     itens_pedidos
----------------------
id bigint(PK)
----------------------
preco_unitario decimal
quantidade     int 
produto_id     bigint
pedido_id     bigint
----------------------
        (*)		
		 |
		 |
		 |
		 |		 
		(1)
----------------------
     produtos
----------------------
id bigint(PK)
----------------------
nome varchar(30)
descricao varchar(60)
preco decimal
----------------------
	

	



